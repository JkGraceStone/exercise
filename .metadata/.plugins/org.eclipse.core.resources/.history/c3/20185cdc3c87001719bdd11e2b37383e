package HuaWei;

import java.util.Scanner;

import javax.naming.spi.DirStateFactory.Result;

public class CopyOfZhouWei {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int[] nums = new int[n];

		if (n > 0) {
			for (int i = 0; i < n; i++) {
				nums[i] = sc.nextInt();
			}
		}

		int result = 0;
		int max = 0;
		for (int i = 0; i < nums.length; i++) {
			max = max > nums[i] ? max : nums[i];
		}
		result = max * max;
		System.out.println(haha(nums, result));

	}

	// 1.数组求和,数据求最大值
	/**
	 * 
	 * @param arr
	 * @return 区间计算值。
	 */
	public static int sumArray(int[] arr) {
		int sum = 0;
		int min = arr[0];
		for (int i = 0; i < arr.length; i++) {
			sum += arr[i];
			min = min < arr[i] ? min : arr[i];
		}
		return sum * min;
	}

	// 计算子区间,先不管优化吧
	public static int[] subArray(int[] arr, int n, int len) {
		int[] a = new int[len];
		for (int i = 0; i < len; i++) {
			a[i] = arr[n + i];
		}
		return a;
	}

	// 遍历得到每一个子数组。找最大值。
	public static int haha(int[] arr, int n) {
		for (int i = 2; i <= arr.length; i++) {
			for (int j = 0; j + i <= arr.length; j++) {
				int y = sumArray(subArray(arr, j, i));
				n = n > y ? n : y;
			}
		}
		return n;
	}
}

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int max =0;
        int maxFirst =0;
        int maxSencond =0;
        int maxThird =0;
        int count = in.nextInt();
        List<Integer> list = new ArrayList<Integer>();
        
//        String str = in.next();
//        for(String temp : str.split("")){
//        	list.add(new Integer(temp));
//        }
        	
        for(int i=0;i<count; i++){
        	 int b = in.nextInt();
        	list.add(b);
        }
      
        for(Integer item : list){
        	if(item > maxFirst)
        		maxFirst = item;
        }
        
        max = maxFirst * maxFirst;
        
        for(Integer item : list){
        	if(item == maxFirst)
        		continue;
        	int result = item* (item+maxFirst);
        	if(result > max)
        		max = result;
        }
        
      
        
        for(Integer item1 : list){
        	maxSencond =0;
        	maxThird =0;
        	for(Integer item2 : list){
            	if(item2<=item1)
            		continue;
               	maxSencond =  item2;
        		for(Integer item3 : list){
        			if(item3<=item2)
                		continue;
        			maxThird = item3;
        			int result = item1* (item1+maxSencond+maxThird);
        			if(result > max){
                		max = result;
                	}
                	
                }
            }
        }
        
        System.out.println(max);
        
    }
}
