package leet.sort;

public class Sort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//10:06
		int[] a = {64,5,7,889,6,24};
		inserSort3(a);
		for(int i : a)
		System.out.print(i);
		
	}
	
	public static void inserSort1(int[] a){
		//1.从第二个元素开始插入到之前的有序数组中
		//有序子数组的个数是从1开始一个一个递增的。
		//如果新插入的数比有序数组最大的大，放在有序数组的
		for(int i = 0;i<a.length-1;i++){
			int j = i;//有序子数组中最大数据的位置。
			int temp = a[i+1];//记录将要被插入的值。
			//在有序集中找需要插入的位置
			while(a[j] > temp && j>=0){
				a[j+1] = a[i];
				j--;
			}
			a[j]=temp;
		}
	}
	public static void inserSort3(int[] a){
		//插入排序，1.记录需要插入的元素，2.已经有序的数组(对比找到应该插入的位置即可)，3从第一个元素有序的情况。
		for(int i = 0;i<a.length-1;i++){
			int j = i;
			int temp = a[i+1];
			while(j > -1 && a[j]>temp){//注意的地方：这里的j下标要先判断。
				a[j+1] = a[j];//向后移动位置。
				j--;
			}//跳出的时候就是找到了
			a[j] = temp;
		}
	}
	
	
	
	
	
	
	
	
	
	
	//这几大排序算法，一定要烂熟于心。从1数据的排序图，2基本的思想，3文字清楚的描述，4手撸代码，5到时间复杂度，稳定性。
	public static void inserSort(int[] a){
		int i,j,temp;
		int n = a.length;
		for(i =0 ;i < n-1;i++){//1.要排序的个数
			temp = a[i+1];//2，第一个元素可以看成是已经排列的有序数集合。
			j= i;
			while(j>-1 && temp<=a[j]){
				a[j+1] = a[j];
				j--;
			}
			a[j+1]=temp;
		}
	}
	

}
